# Generated by Django 2.1.8 on 2019-09-06 14:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(max_length=32, unique=True, verbose_name='邮箱')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户表',
                'verbose_name_plural': '用户表',
                'db_table': 'qzjg_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Classify',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'verbose_name': '分类表',
                'verbose_name_plural': '分类表',
                'db_table': 'qzjg_classify',
            },
        ),
        migrations.CreateModel(
            name='Music',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=32, verbose_name='歌曲名')),
                ('enshrine_num', models.IntegerField(default=0, verbose_name='收藏数量')),
            ],
            options={
                'verbose_name': '歌曲表',
                'verbose_name_plural': '歌曲表',
                'db_table': 'qzjg_Music',
            },
        ),
        migrations.CreateModel(
            name='Singer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=32, verbose_name='歌手名称')),
                ('note', models.CharField(max_length=128, verbose_name='歌单简介')),
                ('avatar', models.ImageField(blank=True, default='media/picture/default.jpg', null=True, upload_to='picture', verbose_name='歌手头像')),
                ('enshrine_num', models.IntegerField(default=0, null=True, verbose_name='收藏数量')),
            ],
            options={
                'verbose_name': '歌手信息表',
                'verbose_name_plural': '歌手信息表',
                'db_table': 'qzjg_singer',
            },
        ),
        migrations.CreateModel(
            name='Song_List',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=32, verbose_name='歌单名称')),
                ('note', models.CharField(max_length=128, verbose_name='歌单简介')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='cover', verbose_name='封面图')),
                ('enshrine_num', models.IntegerField(default=0, null=True, verbose_name='收藏数量')),
                ('user_music_list', models.ManyToManyField(db_constraint=False, related_name='music_list', to=settings.AUTH_USER_MODEL, verbose_name='用户歌单')),
            ],
            options={
                'verbose_name': '歌单表',
                'verbose_name_plural': '歌单表',
                'db_table': 'song_list',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='更新时间')),
                ('avatar', models.ImageField(blank=True, default='media/avatar/default.jpg', help_text='头像图片大小规格: 256x256,或者对应比例的图片', null=True, upload_to='avatar', verbose_name='用户头像')),
                ('signature', models.CharField(max_length=64, null=True, verbose_name='个性签名')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户信息表',
                'verbose_name_plural': '用户信息表',
                'db_table': 'user_info',
            },
        ),
        migrations.AddField(
            model_name='music',
            name='singer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='user.Singer'),
        ),
        migrations.AddField(
            model_name='music',
            name='user',
            field=models.ManyToManyField(db_constraint=False, related_name='user', to=settings.AUTH_USER_MODEL, verbose_name='用户歌曲'),
        ),
        migrations.AddField(
            model_name='classify',
            name='Song_List',
            field=models.ManyToManyField(db_constraint=False, related_name='Song_List', to='user.Song_List', verbose_name='歌单'),
        ),
    ]
